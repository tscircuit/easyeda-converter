diff --git a/lib/schemas/package-detail-shape-schema.ts b/lib/schemas/package-detail-shape-schema.ts
index 0e63d42e8f94eb2e93ca3503ed8fba9754828f3d..b71622aa6e9b2ac631d41d53e7f55b49d50971bd 100644
--- a/lib/schemas/package-detail-shape-schema.ts
+++ b/lib/schemas/package-detail-shape-schema.ts
@@ -168,51 +168,52 @@ export const ShapeItemSchema = z
     const lastParam = restParams.pop()
 
     switch (shape.type) {
       case "TRACK": {
         const [width, layer, _, pointsStr, id, _n] = shape.data.split("~")
         const points = parsePoints(pointsStr)
         return TrackSchema.parse({ type: "TRACK", width, layer, points, id })
       }
       case "PAD": {
         const [padShape, ...params] = shape.data.split("~")
         const [
           centerX,
           centerY,
           width,
           height,
           layermask,
           net,
           number,
           holeRadius,
           ...rest
         ] = params.map((p) => (isNaN(Number(p)) ? p : Number(p)))
         const center = { x: centerX, y: centerY }
         let points, rotation
         if (padShape === "RECT") {
           points = parsePoints(rest[0] as any)
-          rotation = Number(rest[1])
+          const r = Number(rest[1])
+          rotation = Number.isNaN(r) ? undefined : r
         }
         const padInputParams = {
           type: "PAD",
           shape: padShape,
           center,
           width,
           height,
           layermask,
           net,
           number,
           holeRadius,
           points,
           rotation,
           plated: rest.includes("Y"),
         }
         const pad = PadSchema.parse(padInputParams)
         return pad
       }
       case "ARC": {
         const [width, layer, , arcData] = shape.data.split("~")
         // A rx ry x-axis-rotation large-arc-flag sweep-flag x  y
         // A rx ry x-axis-rotation large-arc-flag sweep-flag dx dy
         const match = arcData.match(
           /M\s*([\d.-]+)(?:\s*,\s*|\s+)([\d.-]+)\s*A\s*([\d.-]+)(?:\s*,\s*|\s+)([\d.-]+)\s*([\d.-]+)\s*([\d.-]+)\s*([\d.-]+)\s*([\d.-]+)(?:\s*,\s*|\s+)([\d.-]+)/,
         )
@@ -272,63 +273,65 @@ export const ShapeItemSchema = z
         })
       }
       case "SOLIDREGION": {
         const [layermask, , pathData, fillStyle, id] = shape.data.split("~")
         const points =
           pathData.match(/[ML] ?(-?[\d.]+)[ ,](-?[\d.]+)/g)?.map((point) => {
             const [, x, y] =
               point.match(/[ML]? ?(-?[\d.]+)[ ,](-?[\d.]+)/) || []
             return [Number(x), Number(y)]
           }) || []
         return SolidRegionSchema.parse({
           type: "SOLIDREGION",
           layermask: Number(layermask),
           points,
           fillStyle,
           id,
         })
       }
       case "SVGNODE": {
         const svgData = JSON.parse(shape.data)
         return SVGNodeSchema.parse({ type: "SVGNODE", svgData })
       }
       case "RECT": {
         const [x, y, width, height, lineWidth, id, rotation, layer, fillStyle] =
           shape.data.split("~")
+        const r = rotation ? Number(rotation) : undefined
         return RectSchema.parse({
           type: "RECT",
           x,
           y,
           width,
           height,
           lineWidth: Number(lineWidth),
           id,
-          rotation: rotation ? Number(rotation) : undefined,
+          rotation: Number.isNaN(r as number) ? undefined : r,
           layer: layer ? Number(layer) : undefined,
           fillStyle: fillStyle || undefined,
         })
       }
       case "TEXT": {
         const [textAnchor, x, y, size, layer, id, rotation, , font, text] =
           shape.data.split("~")
+        const r = rotation ? Number(rotation) : undefined
         return TextSchema.parse({
           type: "TEXT",
           text,
           x,
           y,
           size_mm: Number(size) * 2.54, // empirically this seems to match, C5248081 is a good test case
           layer: layer ? Number(layer) : undefined,
           id,
-          rotation: rotation ? Number(rotation) : undefined,
+          rotation: Number.isNaN(r as number) ? undefined : r,
           textAnchor: textAnchor as "L" | "C" | "R" | undefined,
           font: font || undefined,
         })
       }
 
       default:
         throw new Error(`Unknown shape type: ${shape.type}`)
         return BaseShapeSchema.parse({ type: shape.type })
     }
   })
   .pipe(PackageDetailShapeSchema)
 
 export const ShapesArraySchema = z.array(ShapeItemSchema)
diff --git a/lib/schemas/single-letter-shape-schema.ts b/lib/schemas/single-letter-shape-schema.ts
index c2944c8b76d6f9cc288cdb38a86f059dd0efd840..fec1b949532528e738ce01588060a662e220b23c 100644
--- a/lib/schemas/single-letter-shape-schema.ts
+++ b/lib/schemas/single-letter-shape-schema.ts
@@ -185,58 +185,59 @@ const PinShapeOutputSchema = z.object({
   y: z.number(),
   rotation: z.number(),
   id: z.string(),
   label: z.string(),
   labelColor: z.string(),
   path: z.string(),
   arrow: z.string(),
 })
 
 const parsePin = (pinString: string): z.infer<typeof PinShapeOutputSchema> => {
   const parts = pinString.split("~")
   const [, visibility, , pinNumber, x, y, rotation, id] = parts
 
   const nameMatch = pinString.match(/~(\w+)~(start|end)~/)
   const label = nameMatch ? nameMatch[1] : ""
 
   const colorMatch = pinString.match(/#[0-9A-F]{6}/)
   const labelColor = colorMatch ? colorMatch[0] : ""
 
   const pathMatch = pinString.match(/\^\^([^~]+)/)
   const path = pathMatch ? pathMatch[1] : ""
 
   const arrowMatch = pinString.match(/\^\^0~(.+)$/)
   const arrow = arrowMatch ? arrowMatch[1] : ""
 
+  const r = parseFloat(rotation)
   return {
     type: "PIN",
     visibility: visibility as "show" | "hide",
     id,
     pinNumber: isNaN(Number(pinNumber)) ? pinNumber : Number(pinNumber),
     x: parseFloat(x),
     y: parseFloat(y),
-    rotation: parseFloat(rotation),
+    rotation: Number.isNaN(r) ? 0 : r,
     label,
     labelColor,
     path,
     arrow,
   }
 }
 
 export const PinShapeSchema = z
   .string()
   .startsWith("P~")
   .transform(parsePin)
   .pipe(PinShapeOutputSchema)
 
 const PolylineShapeOutputSchema = z.object({
   type: z.literal("POLYLINE"),
   points: z.array(PointSchema),
   color: z.string(),
   lineWidth: z.number(),
   id: z.string(),
 })
 
 const parsePoints = (pointsStr: string): Array<{ x: number; y: number }> => {
   return pointsStr
     .split(" ")
     .reduce<Array<{ x: number; y: number }>>((acc, value, index) => {
diff --git a/tests/assets/C105419.raweasy.json b/tests/assets/C105419.raweasy.json
new file mode 100644
index 0000000000000000000000000000000000000000..31d9008b5ce9957b94918a72a7b5e5e2c705286c
--- /dev/null
+++ b/tests/assets/C105419.raweasy.json
@@ -0,0 +1,252 @@
+{
+  "uuid": "ad4eabda91ee48f3a2efc275ab6e7673",
+  "title": "TF-02A",
+  "description": "",
+  "docType": 2,
+  "type": 3,
+  "thumb": "//image.easyeda.com/components/ad4eabda91ee48f3a2efc275ab6e7673.png",
+  "szlcsc": {
+    "id": 106635,
+    "number": "C105419",
+    "step": 1,
+    "min": 1,
+    "price": 2.01,
+    "stock": 1333,
+    "url": "http://www.szlcsc.com/product/details_106635.html",
+    "image": "https://assets.lcsc.com/images/szlcsc/96x96/Card-Sockets_HRO_TF-02A_TF-02A_C105419_back_10.jpg"
+  },
+  "owner": {
+    "uuid": "0819f05c4eef4c71ace90d822a990e87",
+    "username": "LCSC",
+    "nickname": "LCSC",
+    "avatar": "//image.lceda.cn/avatars/2018/6/kFlrasi7W06gTdBLAqW3fkrqbDhbowynuSzkjqso.png"
+  },
+  "tags": [
+    "SIM Card Connectors"
+  ],
+  "updateTime": 1730096705,
+  "updated_at": "2025-06-07 12:39:47",
+  "dataStr": {
+    "head": {
+      "docType": "2",
+      "editorVersion": "6.3.12",
+      "c_para": {
+        "pre": "Card?",
+        "name": "TF-02A",
+        "package": "TF-SMD_TF-02A",
+        "Supplier": "LCSC",
+        "Manufacturer": "韩国韩荣",
+        "Manufacturer Part": "TF-02A",
+        "Supplier Part": "C105419",
+        "JLCPCB Part Class": "Extended Part"
+      },
+      "x": 400,
+      "y": 315,
+      "importFlag": 0,
+      "c_spiceCmd": null,
+      "puuid": "0bdebe791bec4fa8bd60fd7d3ff7e8dc",
+      "uuid": "ad4eabda91ee48f3a2efc275ab6e7673",
+      "utime": 1574842287,
+      "hasIdFlag": true
+    },
+    "canvas": "CA~1000~1000~#FFFFFF~yes~#CCCCCC~5~1000~1000~line~5~pixel~5~400~315",
+    "shape": [
+      "R~380~270~2~2~60~90~#880000~1~0~none~gge2~0~",
+      "P~show~0~1~360~280~0~gge3~0^^360~280^^M 360 280 h 20~#880000^^1~382~283~0~DAT2~start~~~#0000FF^^1~375~279~0~1~end~~~#0000FF^^0~383~280^^0~M 380 277 L 377 280 L 380 283",
+      "P~show~0~2~360~290~0~gge10~0^^360~290^^M 360 290 h 20~#880000^^1~382~293~0~CD/DAT3~start~~~#0000FF^^1~375~289~0~2~end~~~#0000FF^^0~383~290^^0~M 380 287 L 377 290 L 380 293",
+      "P~show~0~3~360~300~0~gge19~0^^360~300^^M 360 300 h 20~#880000^^1~382~303~0~CMD~start~~~#0000FF^^1~375~299~0~3~end~~~#0000FF^^0~383~300^^0~M 380 297 L 377 300 L 380 303",
+      "P~show~0~4~360~310~0~gge26~0^^360~310^^M 360 310 h 20~#880000^^1~382~313~0~VDD~start~~~#0000FF^^1~375~309~0~4~end~~~#0000FF^^0~383~310^^0~M 380 307 L 377 310 L 380 313",
+      "P~show~0~5~360~320~0~gge33~0^^360~320^^M 360 320 h 20~#880000^^1~382~323~0~CLK~start~~~#0000FF^^1~375~319~0~5~end~~~#0000FF^^0~383~320^^0~M 380 317 L 377 320 L 380 323",
+      "P~show~0~6~360~330~0~gge40~0^^360~330^^M 360 330 h 20~#880000^^1~382~333~0~VSS~start~~~#0000FF^^1~375~329~0~6~end~~~#0000FF^^0~383~330^^0~M 380 327 L 377 330 L 380 333",
+      "P~show~0~7~360~340~0~gge47~0^^360~340^^M 360 340 h 20~#880000^^1~382~343~0~DAT0~start~~~#0000FF^^1~375~339~0~7~end~~~#0000FF^^0~383~340^^0~M 380 337 L 377 340 L 380 343",
+      "P~show~0~8~360~350~0~gge54~0^^360~350^^M 360 350 h 20~#880000^^1~382~353~0~DAT1~start~~~#0000FF^^1~375~349~0~8~end~~~#0000FF^^0~383~350^^0~M 380 347 L 377 350 L 380 353",
+      "P~show~0~9~460~345~~gge56~0^^460~345^^M 460 345 h -20~#880000^^1~438~348~0~9~end~~~#0000FF^^1~445~344~0~9~start~~~#0000FF^^0~443~345^^0~M 440 342 L 437 345 L 440 348",
+      "P~show~0~10~460~330~~gge70~0^^460~330^^M 460 330 h -20~#880000^^1~438~333~0~10~end~~~#0000FF^^1~445~329~0~10~start~~~#0000FF^^0~443~330^^0~M 440 327 L 437 330 L 440 333",
+      "P~show~0~11~460~300~~gge77~0^^460~300^^M 460 300 h -20~#880000^^1~438~303~0~11~end~~~#0000FF^^1~445~299~0~11~start~~~#0000FF^^0~443~300^^0~M 440 297 L 437 300 L 440 303",
+      "P~show~0~12~460~285~~gge84~0^^460~285^^M 460 285 h -20~#880000^^1~438~288~0~12~end~~~#0000FF^^1~445~284~0~12~start~~~#0000FF^^0~443~285^^0~M 440 282 L 437 285 L 440 288"
+    ],
+    "BBox": {
+      "x": 358,
+      "y": 269.4,
+      "width": 104,
+      "height": 90.6
+    },
+    "colors": []
+  },
+  "lcsc": {
+    "id": 106635,
+    "number": "C105419",
+    "step": 1,
+    "min": 1,
+    "price": 0.2588,
+    "stock": 1028,
+    "url": "https://lcsc.com/product-detail/Card-Sockets_TF-02A_C105419.html"
+  },
+  "verify": true,
+  "SMT": true,
+  "datastrid": "f6d3edf3603144fba99b499717055314",
+  "jlcOnSale": 1,
+  "writable": false,
+  "isFavorite": false,
+  "packageDetail": {
+    "uuid": "0bdebe791bec4fa8bd60fd7d3ff7e8dc",
+    "title": "TF-SMD_TF-02A",
+    "docType": 4,
+    "updateTime": 1621997957,
+    "owner": {
+      "uuid": "0819f05c4eef4c71ace90d822a990e87",
+      "username": "LCSC",
+      "nickname": "LCSC",
+      "avatar": "//image.lceda.cn/avatars/2018/6/kFlrasi7W06gTdBLAqW3fkrqbDhbowynuSzkjqso.png",
+      "team": true
+    },
+    "datastrid": "37a7be4d346d40448fac59d85473c1f4",
+    "writable": false,
+    "dataStr": {
+      "head": {
+        "docType": "4",
+        "editorVersion": "6.4.19.8",
+        "c_para": {
+          "package": "TF-SMD_TF-02A",
+          "pre": "U?",
+          "Contributor": "立创EDA官方封装库",
+          "link": "https://atta.szlcsc.com/upload/public/pdf/source/20190322/C105419_7A2010A89C398BCFB97EC67EAFB9CE7B.pdf",
+          "3DModel": "TF-SMD_TF-02A"
+        },
+        "x": 4012.52,
+        "y": 3008.366,
+        "uuid": "0bdebe791bec4fa8bd60fd7d3ff7e8dc",
+        "utime": 1621997804,
+        "importFlag": 0,
+        "transformList": "",
+        "hasIdFlag": true
+      },
+      "canvas": "CA~1000~1000~#000000~yes~#FFFFFF~10~1000~1000~line~0.1~mm~1~45~visible~0.1~4012.52~3008.366~0~yes",
+      "shape": [
+        "CIRCLE~4042.5201~3036.417~0.1181~0.2362~101~gge140~0~~circle_gge141,circle_gge142",
+        "SOLIDREGION~100~~M 3987.5989 3032.8736 L 3987.5989 3036.417 L 3982.4807 3036.417 L 3982.4807 3032.8736 Z ~solid~gge125~~~~0",
+        "SOLIDREGION~100~~M 3991.7331 2980.1179 L 3991.7331 2983.2675 L 3986.6149 2983.2675 L 3986.6149 2980.1179 Z ~solid~gge126~~~~0",
+        "SOLIDREGION~100~~M 4042.1264 2990.3542 L 4038.1894 2990.3542 L 4038.1894 2985.6298 L 4042.1264 2985.6298 Z ~solid~gge127~~~~0",
+        "SOLIDREGION~100~~M 4042.1264 3012.7951 L 4038.1894 3012.7951 L 4038.1894 3008.0707 L 4042.1264 3008.0707 Z ~solid~gge128~~~~0",
+        "SOLIDREGION~100~~M 3998.0515 3014.1757 L 4001.9885 3014.1757 L 4001.9885 3016.1443 L 3998.0515 3016.1443 Z~solid~gge129~~~~0",
+        "SOLIDREGION~100~~M 3999.4095 3009.8427 L 4003.3465 3009.8427 L 4003.3465 3011.8113 L 3999.4095 3011.8113 Z~solid~gge130~~~~0",
+        "SOLIDREGION~100~~M 3998.0315 3005.5117 L 4001.9685 3005.5117 L 4001.9685 3007.4803 L 3998.0315 3007.4803 Z~solid~gge131~~~~0",
+        "SOLIDREGION~100~~M 3997.0475 3001.1807 L 4000.9845 3001.1807 L 4000.9845 3003.1493 L 3997.0475 3003.1493 Z~solid~gge132~~~~0",
+        "SOLIDREGION~100~~M 3998.0315 2996.8507 L 4001.9685 2996.8507 L 4001.9685 2998.8193 L 3998.0315 2998.8193 Z~solid~gge133~~~~0",
+        "SOLIDREGION~100~~M 3997.0475 2992.5197 L 4000.9845 2992.5197 L 4000.9845 2994.4883 L 3997.0475 2994.4883 Z~solid~gge134~~~~0",
+        "SOLIDREGION~100~~M 3998.0315 2988.1887 L 4001.9685 2988.1887 L 4001.9685 2990.1573 L 3998.0315 2990.1573 Z~solid~gge135~~~~0",
+        "SOLIDREGION~100~~M 3998.0315 2983.8587 L 4001.9685 2983.8587 L 4001.9685 2985.8273 L 3998.0315 2985.8273 Z~solid~gge136~~~~0",
+        "SOLIDREGION~99~~M 3982.4807 2980.1179 L 4042.52011496063 2980.1179 L 4042.52011496063 3035.6298 L 3982.4807 3035.6298 Z ~solid~gge110~~~~0",
+        "PAD~RECT~4000.02~3015.16~6.2992~2.7559~1~~1~0~3996.8704 3013.782 4003.1696 3013.782 4003.1696 3016.538 3996.8704 3016.538~0~gge5~0~~Y~0~0~0.2~4000.02,3015.16",
+        "PAD~RECT~4001.378~3010.827~6.2992~2.7559~1~~2~0~3998.2284 3009.449 4004.5276 3009.449 4004.5276 3012.205 3998.2284 3012.205~0~gge8~0~~Y~0~0~0.2~4001.378,3010.827",
+        "PAD~RECT~4000~3006.496~6.2992~2.7559~1~~3~0~3996.8504 3005.118 4003.1496 3005.118 4003.1496 3007.874 3996.8504 3007.874~0~gge11~0~~Y~0~0~0.2~4000,3006.496",
+        "PAD~RECT~3999.016~3002.165~6.2992~2.7559~1~~4~0~3995.8664 3000.787 4002.1656 3000.787 4002.1656 3003.543 3995.8664 3003.543~0~gge14~0~~Y~0~0~0.2~3999.016,3002.165",
+        "PAD~RECT~4000~2997.835~6.2992~2.7559~1~~5~0~3996.8504 2996.457 4003.1496 2996.457 4003.1496 2999.213 3996.8504 2999.213~0~gge17~0~~Y~0~0~0.2~4000,2997.835",
+        "PAD~RECT~3999.016~2993.504~6.2992~2.7559~1~~6~0~3995.8664 2992.126 4002.1656 2992.126 4002.1656 2994.882 3995.8664 2994.882~0~gge20~0~~Y~0~0~0.2~3999.016,2993.504",
+        "PAD~RECT~4000~2989.173~6.2992~2.7559~1~~7~0~3996.8504 2987.795 4003.1496 2987.795 4003.1496 2990.551 3996.8504 2990.551~0~gge23~0~~Y~0~0~0.2~4000,2989.173",
+        "PAD~RECT~4000~2984.843~6.2992~2.7559~1~~8~0~3996.8504 2983.465 4003.1496 2983.465 4003.1496 2986.221 3996.8504 2986.221~0~gge26~0~~Y~0~0~0.2~4000,2984.843",
+        "PAD~RECT~3989.174~2981.89~6.6929~8.6614~1~~9~0~3984.843 2985.236 3984.843 2978.543 3993.504 2978.543 3993.504 2985.236~90~gge29~0~~Y~0~0~0.2~3989.174,2981.89",
+        "PAD~RECT~3985.0398~3034.842~6.6929~8.6614~1~~10~0~3980.7088 3038.189 3980.7088 3031.496 3989.3698 3031.496 3989.3698 3038.189~90~gge32~0~~Y~0~0~0.2~3985.0398,3034.842",
+        "PAD~RECT~4040.0002~2987.992~5.9055~7.874~1~~11~0~4042.9522 2991.929 4037.0472 2991.929 4037.0472 2984.055 4042.9522 2984.055~180~gge35~0~~Y~0~0~0.2~4040.0002,2987.992",
+        "PAD~RECT~4040.0002~3010.4329~5.9055~7.874~1~~12~0~4042.9522 3014.3699 4037.0472 3014.3699 4037.0472 3006.4959 4042.9522 3006.4959~180~gge38~0~~Y~0~0~0.2~4040.0002,3010.4329",
+        "TRACK~1~3~~4014.1 2982.7 4036 2984.8 4036 2991.2 4035.9 2991.3 4014 2992.8 4014 2991.34 4014 2990.8 4033.6 2989.6 4033.6 2986.8 4014 2985.1 4014 2982.8 4014.1 2982.7~gge56~0",
+        "TRACK~1~3~~4014.1 3004.9 4036 3007 4036 3013.4 4035.9 3013.5 4014 3015 4014 3013.54 4014 3013 4033.6 3011.8 4033.6 3009 4014 3007.3 4014 3005 4014.1 3004.9~gge57~0",
+        "TRACK~1~3~~4041.8 2979.9 4041.8 2983.145~gge69~0",
+        "TRACK~1~3~~4041.8 2992.839 4041.8 3005.586~gge72~0",
+        "TRACK~1~3~~4041.7 3015.28 4041.7 3035.3~gge74~0",
+        "TRACK~1~3~~4041.8 2979.9 3994.414 2979.9~gge77~0",
+        "TRACK~1~3~~3981.6 3022.2 3981.6 3030.586~gge81~0",
+        "TRACK~1~3~~4041.7 3035.3 3990.302 3035.3~gge86~0",
+        "TRACK~1~3~~3995.8 2982.5 3996.3708 2982.5~gge88~0",
+        "TRACK~1~3~~3995.8 2982.5 3995.8 2991.0214~gge91~0",
+        "TRACK~1~3~~3995.8 2995.9866 3995.8 2999.6824~gge92~0",
+        "TRACK~1~3~~3995.8 3004.6476 3995.8 3017.5~gge93~0",
+        "TRACK~1~3~~4003.4 2991.6226 4003.4 2995.3854~gge95~0",
+        "TRACK~1~3~~4003.4 3000.2846 4003.4 3004.0464~gge96~0",
+        "ARC~1~3~~M3985.8,2985.7 A37.565,37.565 0 0 1 3981.7,3022.2~~gge54~0",
+        "SVGNODE~{\"gId\":\"g1_outline\",\"nodeName\":\"g\",\"nodeType\":1,\"layerid\":\"19\",\"attrs\":{\"c_width\":\"60.0393\",\"c_height\":\"55.31485\",\"c_rotation\":\"0,0,0\",\"z\":\"0\",\"c_origin\":\"4012.402,3007.5786\",\"uuid\":\"761680ba9d244812bfb349e4268ee9de\",\"c_etype\":\"outline3D\",\"id\":\"g1_outline\",\"title\":\"TF-SMD_TF-02A\",\"layerid\":\"19\",\"transform\":\"scale(1) translate(0, 0)\"},\"childNodes\":[{\"gId\":\"g1_outline_line0\",\"nodeName\":\"polyline\",\"nodeType\":1,\"attrs\":{\"fill\":\"none\",\"id\":\"g1_outline_line0\",\"c_shapetype\":\"line\",\"points\":\"3982.3824 3019.2124 3982.3824 3020.6297 3982.3824 3022.677 3982.3824 3024.6061 3982.3824 3025.551 3982.3824 3026.4171 3982.3824 3029.0549 3982.3824 3031.299 3982.3824 3031.6927 3982.3824 3031.8108 3982.3824 3031.8896 3982.3824 3031.9289 3982.3824 3032.0077 3982.3824 3032.0864 3982.3824 3032.1258 3982.3824 3032.2833 3982.3824 3032.4014 3982.3824 3032.5195 3982.3824 3032.5588 3982.3824 3032.6376 3982.3824 3032.677 3982.3824 3035.236 3987.5005 3035.236 3987.5005 3032.6376 3987.5005 3032.5982 3987.5005 3032.5195 3987.5005 3032.4801 3987.5005 3032.4014 3987.5005 3032.2833 3987.5005 3032.1258 3987.5005 3032.0864 3987.5005 3032.0077 3987.5005 3031.8896 3987.5005 3031.8108 3987.5005 3031.7714 3987.5005 3031.6927 3987.5005 3031.614 3987.5399 3031.4959 3987.6186 3031.4171 3987.6973 3031.3777 3987.7761 3031.3384 3987.8942 3031.299 3988.0123 3031.3384 3988.091 3031.3777 3988.1698 3031.4171 3988.2485 3031.4959 3988.2879 3031.614 3988.2879 3031.6927 3988.2879 3032.9525 3988.2879 3034.4486 3988.2879 3034.6848 3988.2879 3034.8423 3988.2879 3035.0392 3988.2879 3035.1573 3988.2879 3035.236 4042.4216 3035.236 4042.4216 3035.1573 4042.4216 3035.0392 4042.4216 3034.8423 4042.4216 3034.6455 4042.4216 3034.4486 4042.4216 3032.9525 4042.4216 3032.0864 4041.8311 3032.0864 4041.8311 3031.299 4042.0279 3031.299 4042.1854 3031.299 4042.3035 3031.299 4042.4216 3031.299 4042.4216 3031.2203 4042.4216 3031.1022 4042.4216 3031.0234 4042.4216 3030.8659 4042.4216 3020.866 4042.3823 3030.9053 4042.3823 3030.236 4042.4216 3030.9053 4042.3823 3031.0234 4042.4216 3030.9053 4042.4216 3020.866 4042.4216 3020.7872 4042.4216 3020.6691 4042.4216 3020.5904 4042.4216 3020.5116 4042.3823 3020.4723 4042.3035 3020.4723 4042.1854 3020.4723 4042.0279 3020.4723 4041.8311 3020.4723 4041.8311 3019.6849 4042.0279 3019.6849 4042.1854 3019.6849 4042.3035 3019.6849 4042.4216 3019.6849 4042.4216 3019.6455 4042.4216 3019.5274 4042.4216 3019.3699 4042.4216 3019.0943 4042.4216 3018.8187 4042.4216 3018.5038 4042.4216 3013.1101 4042.4216 3005.2361 4042.4216 2992.6377 4042.4216 2984.7637 4042.4216 2983.0708 4042.4216 2982.7952 4042.4216 2982.4802 4042.4216 2982.244 4042.4216 2982.0865 4042.4216 2981.9684 4042.3823 2981.8897 4042.3035 2981.8897 4042.1854 2981.8897 4042.0279 2981.8897 4041.8311 2981.8897 4041.8311 2980.5117 4041.4374 2980.5117 4041.4374 2980.3149 4041.4374 2980.1574 4041.4374 2980.0393 4041.4374 2979.9212 3997.5398 2979.9212 3996.2406 2979.9212 3993.2091 2979.9212 3991.6343 2979.9212 3986.5162 2979.9605 3986.5162 2980.0393 3986.5162 2980.1574 3986.5162 2980.3149 3986.5162 2980.5511 3986.5162 2980.6298 3986.5162 2980.7086 3986.5162 2981.6141 3986.5162 2983.2676 3986.8312 2983.2676 3987.6186 2987.677 3988.3273 2993.8188 3988.6422 2999.9605 3988.6028 3006.1022 3988.1698 3012.2439 3987.5399 3016.929 3986.3194 3016.929 3982.3824 3019.2124 3982.3824 3019.2124\"}}]}"
+      ],
+      "layers": [
+        "1~TopLayer~#FF0000~true~true~true~",
+        "2~BottomLayer~#0000FF~true~false~true~",
+        "3~TopSilkLayer~#FFCC00~true~false~true~",
+        "4~BottomSilkLayer~#66CC33~true~false~true~",
+        "5~TopPasteMaskLayer~#808080~true~false~true~",
+        "6~BottomPasteMaskLayer~#800000~true~false~true~",
+        "7~TopSolderMaskLayer~#800080~true~false~true~0.3",
+        "8~BottomSolderMaskLayer~#AA00FF~true~false~true~0.3",
+        "9~Ratlines~#6464FF~true~false~true~",
+        "10~BoardOutLine~#FF00FF~true~false~true~",
+        "11~Multi-Layer~#FFFFFF~true~false~true~0.5",
+        "12~Document~#FFFFFF~true~false~true~",
+        "13~TopAssembly~#33CC99~true~false~true~",
+        "14~BottomAssembly~#5555FF~true~false~true~",
+        "15~Mechanical~#F022F0~true~false~true~",
+        "19~3DModel~#66CCFF~true~false~true~",
+        "21~Inner1~#800000~false~false~false~~",
+        "22~Inner2~#008000~false~false~false~~",
+        "23~Inner3~#00FF00~false~false~false~~",
+        "24~Inner4~#BC8E00~false~false~false~~",
+        "25~Inner5~#70DBFA~false~false~false~~",
+        "26~Inner6~#00CC66~false~false~false~~",
+        "27~Inner7~#9966FF~false~false~false~~",
+        "28~Inner8~#800080~false~false~false~~",
+        "29~Inner9~#008080~false~false~false~~",
+        "30~Inner10~#15935F~false~false~false~~",
+        "31~Inner11~#000080~false~false~false~~",
+        "32~Inner12~#00B400~false~false~false~~",
+        "33~Inner13~#2E4756~false~false~false~~",
+        "34~Inner14~#99842F~false~false~false~~",
+        "35~Inner15~#FFFFAA~false~false~false~~",
+        "36~Inner16~#99842F~false~false~false~~",
+        "37~Inner17~#2E4756~false~false~false~~",
+        "38~Inner18~#3535FF~false~false~false~~",
+        "39~Inner19~#8000BC~false~false~false~~",
+        "40~Inner20~#43AE5F~false~false~false~~",
+        "41~Inner21~#C3ECCE~false~false~false~~",
+        "42~Inner22~#728978~false~false~false~~",
+        "43~Inner23~#39503F~false~false~false~~",
+        "44~Inner24~#0C715D~false~false~false~~",
+        "45~Inner25~#5A8A80~false~false~false~~",
+        "46~Inner26~#2B937E~false~false~false~~",
+        "47~Inner27~#23999D~false~false~false~~",
+        "48~Inner28~#45B4E3~false~false~false~~",
+        "49~Inner29~#215DA1~false~false~false~~",
+        "50~Inner30~#4564D7~false~false~false~~",
+        "51~Inner31~#6969E9~false~false~false~~",
+        "52~Inner32~#9069E9~false~false~false~~",
+        "99~ComponentShapeLayer~#00CCCC~true~false~true~0.4",
+        "100~LeadShapeLayer~#CC9999~true~false~true~",
+        "101~ComponentPolarityLayer~#66FFCC~true~false~true~",
+        "Hole~Hole~#222222~false~false~true~",
+        "DRCError~DRCError~#FAD609~false~false~true~"
+      ],
+      "objects": [
+        "All~true~false",
+        "Component~true~true",
+        "Prefix~true~true",
+        "Name~true~false",
+        "Track~true~true",
+        "Pad~true~true",
+        "Via~true~true",
+        "Hole~true~true",
+        "Copper_Area~true~true",
+        "Circle~true~true",
+        "Arc~true~true",
+        "Solid_Region~true~true",
+        "Text~true~true",
+        "Image~true~true",
+        "Rect~true~true",
+        "Dimension~true~true",
+        "Protractor~true~true"
+      ],
+      "BBox": {
+        "x": 3980.7,
+        "y": 2978.5,
+        "width": 62.2,
+        "height": 59.6
+      },
+      "netColors": []
+    }
+  }
+}
\ No newline at end of file
diff --git a/tests/convert-to-ts/C105419-to-ts.test.ts b/tests/convert-to-ts/C105419-to-ts.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..022420376a473397c4fca4bd3654e55ff07b7ec4
--- /dev/null
+++ b/tests/convert-to-ts/C105419-to-ts.test.ts
@@ -0,0 +1,96 @@
+
+import { it, expect } from "bun:test"
+import chipRawEasy from "../assets/C105419.raweasy.json"
+import { convertBetterEasyToTsx } from "lib/websafe/convert-to-typescript-component"
+import { EasyEdaJsonSchema } from "lib/schemas/easy-eda-json-schema"
+import { convertEasyEdaJsonToCircuitJson } from "lib/convert-easyeda-json-to-tscircuit-soup-json"
+import { convertCircuitJsonToPcbSvg } from "circuit-to-svg"
+
+it("should convert C105419 into typescript file", async () => {
+  const betterEasy = EasyEdaJsonSchema.parse(chipRawEasy)
+  const result = await convertBetterEasyToTsx({
+    betterEasy,
+  })
+
+  expect(result).not.toContain("milmm")
+  expect(result).not.toContain("NaNmm")
+
+  // Add more specific assertions here based on the component
+  
+  expect(result).toMatchInlineSnapshot(`
+    "import type { ChipProps } from "@tscircuit/props"
+
+    const pinLabels = {
+      pin1: ["DAT2"],
+      pin2: ["pin2"],
+      pin3: ["CMD"],
+      pin4: ["VDD"],
+      pin5: ["CLK"],
+      pin6: ["VSS"],
+      pin7: ["DAT0"],
+      pin8: ["DAT1"],
+      pin9: ["pin9"],
+      pin10: ["pin10"],
+      pin11: ["pin11"],
+      pin12: ["pin12"]
+    } as const
+
+    export const TF_02A = (props: ChipProps<typeof pinLabels>) => {
+      return (
+        <chip
+          pinLabels={pinLabels}
+          supplierPartNumbers={{
+      "jlcpcb": [
+        "C105419"
+      ]
+    }}
+          manufacturerPartNumber="TF_02A"
+          footprint={<footprint>
+            <smtpad portHints={["pin1"]} pcbX="-3.0000003499999366mm" pcbY="-1.7256759999999076mm" width="1.5999967999999998mm" height="0.6999986mm" shape="rect" />
+    <smtpad portHints={["pin2"]} pcbX="-2.655068349999965mm" pcbY="-0.6250940000001037mm" width="1.5999967999999998mm" height="0.6999986mm" shape="rect" />
+    <smtpad portHints={["pin3"]} pcbX="-3.0050803499998437mm" pcbY="0.47498000000007323mm" width="1.5999967999999998mm" height="0.6999986mm" shape="rect" />
+    <smtpad portHints={["pin4"]} pcbX="-3.255016349999778mm" pcbY="1.5750540000000228mm" width="1.5999967999999998mm" height="0.6999986mm" shape="rect" />
+    <smtpad portHints={["pin5"]} pcbX="-3.0050803499998437mm" pcbY="2.6748740000000453mm" width="1.5999967999999998mm" height="0.6999986mm" shape="rect" />
+    <smtpad portHints={["pin6"]} pcbX="-3.255016349999778mm" pcbY="3.774947999999995mm" width="1.5999967999999998mm" height="0.6999986mm" shape="rect" />
+    <smtpad portHints={["pin7"]} pcbX="-3.0050803499998437mm" pcbY="4.875022000000058mm" width="1.5999967999999998mm" height="0.6999986mm" shape="rect" />
+    <smtpad portHints={["pin8"]} pcbX="-3.0050803499998437mm" pcbY="5.974841999999967mm" width="1.5999967999999998mm" height="0.6999986mm" shape="rect" />
+    <smtpad portHints={["pin9"]} pcbX="-5.754884349999884mm" pcbY="6.724904000000038mm" width="2.1999956mm" height="1.6999966mm" shape="rect" />
+    <smtpad portHints={["pin10"]} pcbX="-6.804971149999915mm" pcbY="-6.724904000000038mm" width="2.1999956mm" height="1.6999966mm" shape="rect" />
+    <smtpad portHints={["pin11"]} pcbX="7.154970450000064mm" pcbY="5.174995999999965mm" width="1.499997mm" height="1.9999959999999999mm" shape="rect" />
+    <smtpad portHints={["pin12"]} pcbX="7.154970450000064mm" pcbY="-0.524992599999905mm" width="1.499997mm" height="1.9999959999999999mm" shape="rect" />
+    <silkscreenpath route={[{"x":0.5763196500001868,"y":6.519164000000046},{"x":6.138919650000162,"y":5.985764000000017},{"x":6.138919650000162,"y":4.360164000000054},{"x":6.113519650000171,"y":4.33476399999995},{"x":0.5509196500000826,"y":3.9537639999999783},{"x":0.5509196500000826,"y":4.324604000000022},{"x":0.5509196500000826,"y":4.4617640000000165},{"x":5.529319650000161,"y":4.766564000000017},{"x":5.529319650000161,"y":5.4777639999998655},{"x":0.5509196500000826,"y":5.909563999999932},{"x":0.5509196500000826,"y":6.493763999999942},{"x":0.5763196500001868,"y":6.519164000000046}]} />
+    <silkscreenpath route={[{"x":0.5763196500001868,"y":0.8803639999999859},{"x":6.138919650000162,"y":0.3469640000000709},{"x":6.138919650000162,"y":-1.2786359999998922},{"x":6.113519650000171,"y":-1.30403600000011},{"x":0.5509196500000826,"y":-1.685036000000082},{"x":0.5509196500000826,"y":-1.3141959999999244},{"x":0.5509196500000826,"y":-1.17703599999993},{"x":5.529319650000161,"y":-0.8722360000000435},{"x":5.529319650000161,"y":-0.161036000000081},{"x":0.5509196500000826,"y":0.27076399999998557},{"x":0.5509196500000826,"y":0.8549639999999954},{"x":0.5763196500001868,"y":0.8803639999999859}]} />
+    <silkscreenpath route={[{"x":7.612119650000295,"y":7.230364000000009},{"x":7.612119650000295,"y":6.406133999999952}]} />
+    <silkscreenpath route={[{"x":7.612119650000295,"y":3.9438579999999774},{"x":7.612119650000295,"y":0.7061199999999417}]} />
+    <silkscreenpath route={[{"x":7.586719650000077,"y":-1.7561560000000327},{"x":7.586719650000077,"y":-6.8412360000000945}]} />
+    <silkscreenpath route={[{"x":7.612119650000295,"y":7.230364000000009},{"x":-4.423924349999879,"y":7.230364000000009}]} />
+    <silkscreenpath route={[{"x":-7.678680349999922,"y":-3.5138359999998556},{"x":-7.678680349999922,"y":-5.643879999999967}]} />
+    <silkscreenpath route={[{"x":7.586719650000077,"y":-6.8412360000000945},{"x":-5.468372349999754,"y":-6.8412360000000945}]} />
+    <silkscreenpath route={[{"x":-4.071880349999901,"y":6.569964000000027},{"x":-3.9268971499998315,"y":6.569964000000027}]} />
+    <silkscreenpath route={[{"x":-4.071880349999901,"y":6.569964000000027},{"x":-4.071880349999901,"y":4.40552839999998}]} />
+    <silkscreenpath route={[{"x":-4.071880349999901,"y":3.1443676000000096},{"x":-4.071880349999901,"y":2.2056343999998944}]} />
+    <silkscreenpath route={[{"x":-4.071880349999901,"y":0.9444736000000375},{"x":-4.071880349999901,"y":-2.320035999999959}]} />
+    <silkscreenpath route={[{"x":-2.141480349999938,"y":4.252823599999942},{"x":-2.141480349999938,"y":3.2970723999999336}]} />
+    <silkscreenpath route={[{"x":-2.141480349999938,"y":2.0526756000000432},{"x":-2.141480349999938,"y":1.0971783999999616}]} />
+    <silkscreenpath route={[{"x":-6.611880349999865,"y":5.7571640000001025},{"x":-6.51781893128998,"y":5.5256051306557765},{"x":-6.4298548075097415,"y":5.291662032041472},{"x":-6.34804833493456,"y":5.055495223394246},{"x":-6.272455644789261,"y":4.817266749742885},{"x":-6.203128604733024,"y":4.577140070719452},{"x":-6.140114783271542,"y":4.335279948403809},{"x":-6.083457417117643,"y":4.09185233427138},{"x":-6.033195381524706,"y":3.8470242553265734},{"x":-5.989363163612325,"y":3.6009636994980383},{"x":-5.951990838703296,"y":3.3538395003741925},{"x":-5.921104049687074,"y":3.105821221358269},{"x":-5.89672398942605,"y":2.85707903932348},{"x":-5.878867386213074,"y":2.607783627846743},{"x":-5.867546492293968,"y":2.3581060401008926},{"x":-5.862769075460392,"y":2.108217591488028},{"x":-5.8645384137200836,"y":1.8582897420916424},{"x":-5.872853293047683,"y":1.6084939790300723},{"x":-5.887708008218169,"y":1.3590016987910758},{"x":-5.9090923667206425,"y":1.109984089628142},{"x":-5.936991695752454,"y":0.8616120141017518},{"x":-5.971386852286514,"y":0.6140558918410761},{"x":-6.0122542362070135,"y":0.36748558261228936},{"x":-6.059565806501496,"y":0.12207026976886937},{"x":-6.113289100501788,"y":-0.12202165583187252},{"x":-6.173387256157866,"y":-0.3646227113705436},{"x":-6.2398190373309035,"y":-0.6055664369827127},{"x":-6.312538862087081,"y":-0.8446875099754152},{"x":-6.391496833973179,"y":-1.081821858262174},{"x":-6.476638776253594,"y":-1.3168067729407085},{"x":-6.567906269082869,"y":-1.5494810199348876},{"x":-6.665236689590756,"y":-1.7796849506258923},{"x":-6.768563254849823,"y":-2.007260611392553},{"x":-6.877815067699771,"y":-2.232051851993333},{"x":-6.992917165391759,"y":-2.4539044327053716},{"x":-7.113790571024765,"y":-2.6726661301580634},{"x":-7.240352347735097,"y":-2.888186841779202},{"x":-7.372515655602797,"y":-3.1003186887875245},{"x":-7.510189811237751,"y":-3.3089161176593507},{"x":-7.653280349999932,"y":-3.5138359999998556}]} />
+          </footprint>}
+          cadModel={{
+            objUrl: "https://modelcdn.tscircuit.com/easyeda_models/download?uuid=761680ba9d244812bfb349e4268ee9de&pn=C105419",
+            rotationOffset: { x: 0, y: 0, z: 0 },
+            positionOffset: { x: 0, y: 0, z: 0 },
+          }}
+          {...props}
+        />
+      )
+    }"
+  `)
+})
+
+it("C105419 should generate Circuit Json without errors", () => {
+  const betterEasy = EasyEdaJsonSchema.parse(chipRawEasy)
+  const circuitJson = convertEasyEdaJsonToCircuitJson(betterEasy)
+
+  expect(convertCircuitJsonToPcbSvg(circuitJson)).toMatchSvgSnapshot(
+    import.meta.path,
+  )
+})
diff --git a/tests/convert-to-ts/__snapshots__/C105419-to-ts.snap.svg b/tests/convert-to-ts/__snapshots__/C105419-to-ts.snap.svg
new file mode 100644
index 0000000000000000000000000000000000000000..89829c366e639fc8c13c452a2cd2ddc3a6a95ebd
--- /dev/null
+++ b/tests/convert-to-ts/__snapshots__/C105419-to-ts.snap.svg
@@ -0,0 +1,13 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600"><style>
+              .boundary { fill: #000; }
+              .pcb-board { fill: none; }
+              .pcb-trace { fill: none; }
+              .pcb-hole-outer { fill: rgb(200, 52, 52); }
+              .pcb-hole-inner { fill: rgb(255, 38, 226); }
+              .pcb-pad { }
+              .pcb-boundary { fill: none; stroke: #fff; stroke-width: 0.3; }
+              .pcb-silkscreen { fill: none; }
+              .pcb-silkscreen-top { stroke: #f2eda1; }
+              .pcb-silkscreen-bottom { stroke: #f2eda1; }
+              .pcb-silkscreen-text { fill: #f2eda1; }
+            </style><rect class="boundary" x="0" y="0" width="800" height="600"/><rect class="pcb-boundary" x="114.57477786903382" y="37.33293511535851" width="570.8504442619324" height="525.334129769283"/><g transform="translate(401.24245314715944, 307.263645187783) rotate(0) scale(1, -1)"><rect class="pcb-component" x="0" y="0" width="0" height="0"/><rect class="pcb-component-outline" x="0" y="0" width="0" height="0"/></g><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="259.3773463749683" y="358.6216941685901" width="59.732576719181274" height="26.13300231464181"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="272.2546703501781" y="317.53373777346593" width="59.732576719181274" height="26.13300231464181"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="259.18769506458574" y="276.4647465093664" width="59.732576719181274" height="26.13300231464181"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="249.8568505935959" y="235.39575524527535" width="59.732576719181274" height="26.13300231464181"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="259.18769506458574" y="194.3362465467009" width="59.732576719181274" height="26.13300231464181"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="249.8568505935959" y="153.26725528260985" width="59.732576719181274" height="26.13300231464181"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="259.18769506458574" y="112.19826401851459" width="59.732576719181274" height="26.13300231464181"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="259.18769506458574" y="71.13875531994437" width="59.732576719181274" height="26.13300231464181"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="145.32958261778438" y="24.47030911670152" width="82.13229298887426" height="63.46586276413011"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="106.12676024788877" y="526.5911184947344" width="82.13229298887426" height="63.46586276413011"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="640.3588553722033" y="76.73299484805611" width="55.99929067423245" height="74.6657208989766"/><rect class="pcb-pad" fill="rgb(200, 52, 52)" x="640.3588553722033" y="289.53029941013455" width="55.99929067423245" height="74.6657208989766"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 422.7581572463225 63.88411856940013 L 630.426342119015 83.79750615993345 L 630.426342119015 144.48592548345889 L 629.4780855670853 145.4341820353929 L 421.80990069438855 159.65803031434342 L 421.80990069438855 145.81348465616225 L 421.80990069438855 140.69289927573988 L 607.6681848726923 129.31382065257858 L 607.6681848726923 102.76263719854123 L 421.80990069438855 86.64227581572695 L 421.80990069438855 64.83237512133411 L 422.7581572463225 63.88411856940013 Z" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_27"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 422.7581572463225 274.39707309788605 L 630.426342119015 294.3104606884151 L 630.426342119015 354.99888001194057 L 629.4780855670853 355.9471365638788 L 421.80990069438855 370.17098484282934 L 421.80990069438855 356.3264391846439 L 421.80990069438855 351.20585380422153 L 607.6681848726923 339.82677518106453 L 607.6681848726923 313.2755917270229 L 421.80990069438855 297.15523034420863 L 421.80990069438855 275.3453296498158 L 422.7581572463225 274.39707309788605 Z" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_28"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 685.4252221309662 37.33293511535851 L 685.4252221309662 68.10386022549261" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_29"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 685.4252221309662 160.0278503695962 L 685.4252221309662 280.9021130441282" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_30"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 684.4769655790279 372.82610318823185 L 684.4769655790279 562.6670648846415" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_31"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 685.4252221309662 37.33293511535851 L 236.08437243335928 37.33293511535851" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_32"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 114.57477786903382 438.44545658178856 L 114.57477786903382 517.9662510266515" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_33"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 684.4769655790279 562.6670648846415 L 197.09206301799796 562.6670648846415" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_34"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 249.22720824310974 61.98760546554061 L 254.6398566415294 61.98760546554061" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_35"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 249.22720824310974 61.98760546554061 L 249.22720824310974 142.79233928171448" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_36"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 249.22720824310974 189.87517359814706 L 249.22720824310974 224.92083924438424" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_37"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 249.22720824310974 272.00367356081256 L 249.22720824310974 393.87739864107743" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_38"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 321.29470618979644 148.4932576719197 L 321.29470618979644 184.1742552079461" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_39"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 321.29470618979644 230.6312402001018 L 321.29470618979644 266.3027551706116" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_path_40"/><path class="pcb-silkscreen pcb-silkscreen-top" d="M 154.40155305010043 92.33181512730121 L 157.91314189165513 100.97658737191873 L 161.19710081722215 109.71036989317247 L 164.25117654988773 118.52717003680067 L 167.0732735462776 127.42093818625784 L 169.66145543443696 136.38557191370617 L 172.01394634242925 145.41492016710876 L 174.1291321168599 154.50278749080127 L 176.00556143041683 163.6429382764656 L 177.64194677770203 172.82910104166135 L 179.0371653586409 182.0549727329868 L 180.19025984890527 191.31422305091118 L 181.1004390567386 200.60049879326866 L 181.76707846586936 209.9074282144863 L 182.18972066399917 219.22862539756136 L 182.36807565666612 228.55769463570303 L 182.3020210662199 237.8882348207394 L 181.9916022157906 247.21384383520848 L 181.43703209817372 256.52812294515377 L 180.63869122971732 265.8246811906153 L 179.59712738921067 275.09713977070896 L 178.313055242042 284.3391364204765 L 176.78735584980353 293.5443297762887 L 175.0210760657939 302.7064037269875 L 173.01542781669767 311.81907174762296 L 170.77178727103657 320.87608121296563 L 168.29169389490588 329.8712176876975 L 165.57684939568327 338.79830919044895 L 162.62911655441928 347.65123042866134 L 159.45051794766894 356.4239070014431 L 156.04323455973218 365.11031956749173 L 152.40960428616066 373.7045079752795 L 148.55212032965105 382.2005753525161 L 144.47342948928866 390.592692152366 L 140.176330344512 398.87510015326336 L 135.66377133484258 407.0421164099904 L 130.93884873683123 415.08813715295827 L 126.00480453957528 423.0076416332211 L 120.86502422019373 430.7951959105236 L 115.52303442096354 438.44545658178856" stroke-width="9.482565519301067" data-pcb-component-id="pcb_component_1" data-pcb-silkscreen-path-id="pcb_silkscreen_arc_41"/></svg>
\ No newline at end of file
